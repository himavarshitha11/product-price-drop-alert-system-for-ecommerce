from flask import Flask, render_template, request
import requests
from bs4 import BeautifulSoup
import smtplib
from email.mime.text import MIMEText

app = Flask(__name__)

def get_price(url):
    try:
        headers = {
            'User-Agent': 'Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/137.0.0.0 Safari/537.36'
        }
        response = requests.get(url, headers=headers)
        soup = BeautifulSoup(response.content, 'html.parser')

        price_whole = soup.find("span", class_="a-price-whole")
        price_fraction = soup.find("span", class_="a-price-fraction")

        if price_whole:
            price = price_whole.text.strip().replace(',', '')
            if price_fraction:
                price += "." + price_fraction.text.strip()
            else:
                price += ".00"
            return float(price)
        else:
            return None
    except Exception as e:
        print(f"[ERROR] Failed to fetch price: {e}")
        return None

def send_email(subject, body, to_email, from_email, from_password):
    try:
        msg = MIMEText(body)
        msg['Subject'] = subject
        msg['From'] = from_email
        msg['To'] = to_email

        server = smtplib.SMTP_SSL('smtp.gmail.com', 465)
        server.login(from_email, from_password)
        server.send_message(msg)
        server.quit()
        print("[SUCCESS] Email sent successfully!")
    except Exception as e:
        print(f"[ERROR] Failed to send email: {e}")

@app.route("/", methods=["GET", "POST"])
def index():
    message = ""
    if request.method == "POST":
        url = request.form["url"]
        try:
            target_price = float(request.form["price"])
        except:
            message = "‚ùå Invalid price format!"
            return render_template("index.html", message=message)
        from_email = request.form["from_email"]
        from_pass = request.form["from_pass"]
        to_email = request.form["to_email"]

        current_price = get_price(url)
        if current_price:
            if current_price <= target_price:
                subject = "üéâ Price Drop Alert!"
                body = f"The product price dropped to ‚Çπ{current_price}!\nCheck here: {url}"
                send_email(subject, body, to_email, from_email, from_pass)
                message = f"‚úÖ Price is ‚Çπ{current_price}. Email sent!"
            else:
                message = f"‚ö†Ô∏è Current price ‚Çπ{current_price} is still above your target ‚Çπ{target_price}."
        else:
            message = "‚ùå Could not fetch price. Please check the product URL."
    return render_template("index.html", message=message)

if __name__ == "__main__":
    app.run(host='0.0.0.0', port=3000)
